#include <stdio.h>
#include <stdlib.h>
#include "../libfdr/jrb.h"
#include "./undirGraph.h"

JRB creatGraph(){
  JRB g = make_jrb();
  return g;
}

void addEdge(Graph graph,int v1,int v2){
  JRB node = jrb_find_int(graph,v1);
  JRB tree;

  if(node == NULL){
    tree = make_jrb();
    jrb_insert_int(graph,v1,new_jval_v(tree));
  }else{
    tree = (JRB)jval_v(node->val);
  }
  jrb_insert_int(tree,v2,new_jval_i(1));

  node = jrb_find_int(graph,v2);
  if(node == NULL){
    tree = make_jrb();
    jrb_insert_int(graph,v2,new_jval_v(tree));
  }else{
    tree = (JRB)jval_v(node->val);
  }
  jrb_insert_int(tree,v1,new_jval_i(1));
}

int adjacent(Graph g,int v1, int v2){
  //If the tree does not have vertex v1 or v2 is not in the tree, return 0
  //If true, return 1;

  JRB node = jrb_find_int(g,v1);
  if (node==NULL) return 0;

  JRB tree = (JRB) jval_v(node->val);

  if(jrb_find_int(tree, v2) == NULL) return 0;

  return 1;
}

int getAdjacentVertices(Graph g,int vertex, int* output){
  JRB node = jrb_find_int(g, vertex);

  if(node == NULL) //vertex does not exist
    return 0;

  JRB tree = (JRB) jval_v(node->val);

  int count = 0;
  jrb_traverse(node, tree)
    output[count++] = jval_i(node->key);

  return count;
}

void dropGraph(Graph g){
  //delete all adjacent list tree then delete vertices tree
  JRB node;
  jrb_traverse(node, g);
  jrb_free_tree(jval_v(node->val));

  jrb_free_tree(g);
}

